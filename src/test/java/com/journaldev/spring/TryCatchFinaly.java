package com.journaldev.spring;

/**
 * - оператор 'return' выводит программу из тела функции
 *
 * - если функция возвращает какой-то тип данных тогда в конце тела функции должен стоять оператор 'return'
 *
 * - если внутри функции присутствует условие тогда в теле функции должно стоять два оператор 'return'
 *   (на случай успеха и в рпотивном случае)
 *   (или же один оператор 'return' стоит как обычно в конце тела функции в другой оператор стоит только на случай успеха)
 *
 * - если внутри функции присутствует try/catch тогда в теле функции может стоять один или два оператор 'return' (или больше в зависимости от количества блоков-catch)
 *   (оператор 'return' МОЖЕТ стоять либо только один в конце тела функции)
 *   (оператор 'return' МОЖЕТ стоять либо только один в блоке-finally)
 *   [НЕЛЬЗЯ одновркменно оператор 'return' ставить и в конце тела функции и в блоке-finally]
 *   [НЕЛЬЗЯ одновркменно оператор 'return' ставить и в конце тела функции и в блоке-try и в блоке-catch]
 *   [НЕЛЬЗЯ одновркменно оператор 'return' ставить и в конце тела функции и в блоке-try и в блоке-catch и в блоке-finally]
 *   (МОЖНО одновркменно оператор 'return' ставить и в конце тела функции и в блоке-try или блоке-catch)
 *   (МОЖНО одновркменно оператор 'return' ставить в блоке-try и в блоке-catch)
 *   (МОЖНО одновркменно оператор 'return' ставить в блоке-try и в блоке-finally)
 *   (МОЖНО одновркменно оператор 'return' ставить в блоке-catch и в блоке-finally)
 *   (МОЖНО одновркменно оператор 'return' ставить в блоке-try и в блоке-catch и в блоке-finally)
 *
 * - сперва отработает блок-try, только до оператора 'return'
 *   (если блок-try свалиться, тогда вместо него сперва отработает блок-catch, только до оператора 'return')
 * - после этого выполнение перейдет к блоку-finally
 *   (в любом случае первым будет вызван оператор 'return' который из блока-finally)
 * - если оператор 'return' в блоке-finally отсутствует тогда, следующим может вызван оператор 'return' который из блока-try (или на случай когда блок-try свалиться, тогда вместо него следующим может вызван оператор 'return' из блока-catch)
 * - если оператор 'return' в try/catch/finally отсутствует, только тогда последним будет вызван оператор 'return' который в конце тела функции
 *
 */

public class TryCatchFinaly {

    public static void main(String[] args) {
        TryCatchFinaly tcf = new TryCatchFinaly();
        System.out.println( tcf.func2() );
    }

    public String func1() {
        if(100 == 100)
            return "TRUE";
//        else
        return "FALSE";
    }

    public String func2() {
        try {
            int a = 1 / 0;
            System.out.print("print-try ");
            return "return-try";
        } catch (Exception e) {
            System.out.print("print-catch ");
            return "return-catch";
        } finally {
            System.out.print("print-finally ");
//            return "return-finally";
        }
//        return "return-END";
    }

}
